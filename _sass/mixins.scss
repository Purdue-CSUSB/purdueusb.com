/* Credit: https://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/ */
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

@mixin rem-fallback($property, $values...) {
    $max: length($values);
    $pxValues: '';
    $remValues: '';

    @for $i from 1 through $max {
        $value: strip-unit(nth($values, $i));
        $pxValues: #{$pxValues + $value*16}px;

        @if $i < $max {
            $pxValues: #{$pxValues + " "};
        }
    }

    @for $i from 1 through $max {
        $value: strip-unit(nth($values, $i));
        $remValues: #{$remValues + $value}rem;

        @if $i < $max {
            $remValues: #{$remValues + " "};
        }
    }

    #{$property}: $pxValues;
    #{$property}: $remValues;
}

/* Credit: https://css-tricks.com/snippets/sass/power-function/
  Modified by Zach Bryant
*/
@function pow($number, $exponent) {
    $value: 1;

    @if $exponent>0 {
        @for $i from 1 through $exponent {
            $value: $value * $number;
        }
    }

    @else if $exponent < 0 {
        @for $i from $exponent through -1 {
            $value: $value * $number;
        }

        $value: 1 / $value;
    }

    @return $value;
}

/* Font Mixins */
@mixin font-size($arg) {
    font-size: map-get($font-sizes, $arg);
}
@mixin font-family($arg) {
    font-family: map-get($font-families, $arg);
}
@mixin font-weight($arg) {
    font-weight: map-get($font-weights, $arg);
}
@mixin font-base {
    color: $text-color;
}

@mixin font-body {
    @include font-base;
    @include font-family("body");
}

@mixin font-header {
    @include font-base;
    @include font-family("header");
}

@mixin font-normal {
    @include font-weight("base");
}

@mixin font-medium {
    @include font-weight("medium");
}

@mixin font-semibold {
    @include font-weight("semibold");
}

@mixin font-bold {
    @include font-weight("bold");
}

@mixin font-button {
    @include font-bold;
    @include font-header;
    @include font-size("button");
}

@mixin rounded($radius) {
    border-radius: $radius;
    -webkit-border-radius: $radius;
}

@mixin border($color, $width) {
    border: $width solid $color;
}

@mixin shadow-box {
    -webkit-box-shadow: $shadow-default;
    box-shadow: $shadow-default;
}

@mixin shadow-text {
    text-shadow: $shadow-default;
}

@mixin shadow-drop {
    -webkit-filter: drop-shadow($shadow-default);
    filter: drop-shadow($shadow-default);
}

@mixin justify($arg) {
    justify-content: $arg;
}

@mixin clickable {
    cursor: pointer;
    @include shadow-drop;
}

@mixin flex-even {
    display: flex;
    display: -webkit-flex;
    flex-grow: 1;
    flex-shrink: 1;
    flex-basis: 0;
}


/* Sizing mixins */
/* Use media queries like this:
@include media-query($on-mobile) {
  .wrapper {
    padding-right: $spacing-unit / 2;
    padding-left: $spacing-unit / 2;
  }
}
*/
@mixin media-query-above($device) {
    @media screen and (min-width: $device) {
        @content;
    }
}

@mixin media-query-below($device) {
    @media screen and (max-width: $device) {
        @content;
    }
}


/* Spacing Mixins */
@function spacing-group($index) {
    $num: pow($spacing-base, $index - 2);
    @return #{$num + "rem"};
}

// Paddings
@mixin p-bottom($size) {
    padding-bottom: $size;
}

@mixin p-top($size) {
    padding-top: $size;
}

@mixin py($size) {
    @include p-top($size);
    @include p-bottom($size);
}

@mixin p-left($size) {
    padding-left: $size;
}

@mixin p-right($size) {
    padding-right: $size;
}

@mixin px($size) {
    @include p-left($size);
    @include p-right($size);
}

@mixin pa($size) {
    @include px($size);
    @include py($size);
}

// Margins
@mixin m-bottom($size) {
    margin-bottom: $size;
}

@mixin m-top($size) {
    margin-top: $size;
}

@mixin my($size) {
    @include m-top($size);
    @include m-bottom($size);
}

@mixin m-left($size) {
    margin-left: $size;
}

@mixin m-right($size) {
    margin-right: $size;
}

@mixin mx($size) {
    @include m-left($size);
    @include m-right($size);
}

@mixin ma($size) {
    @include mx($size);
    @include my($size);
}

@mixin screen-variant($prefix:"--") {

    @each $name, $vals in $screens {
        .#{$prefix}#{$name}- {
            &above {
                @content;
                $size: map-get($vals, "min");

                @include media-query-below($size) {
                    display: none !important;
                }
            }

            &below {
                @content;
                $size: map-get($vals, "max");

                @include media-query-above($size) {
                    display: none !important;
                }
            }
        }
    }

    @content;
}