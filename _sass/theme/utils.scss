.rounded {
  @include rounded($border-radius);

  &--slight {
    @include rounded($border-radius-slight);
  }
}

.shadow {
  &-box {
    @include shadow-box;
  }

  &-text {
    @include shadow-text;
  }
}

.justify {
  &-start {
    @include justify(flex-start);
  }

  &-center {
    @include justify(center);
  }

  &-end {
    @include justify(flex-end);
  }

  &-around {
    @include justify(space-around);
  }

  &-between {
    @include justify(space-between);
  }
}

.align {
  &-items {
    &-start {
      align-items: flex-start;
    }
    
    &-center {
      align-items: center;
    }
  
    &-end {
      align-items: flex-end;
    }
  
    &-baseline {
      align-items: baseline;
    } 
  }

  &-content {
    &-start {
      align-content: flex-start;
    }
    
    &-center {
      align-content: center;
    }
  
    &-end {
      align-content: flex-end;
    }
  
    &-between {
      align-content: space-between;
    }
  
    &-around {
      align-content: space-around;
    }
  
    &-baseline {
      align-content: baseline;
    }
  }
}

.font {
  &--bold {
    @include font-bold;
  }

  &--semibold {
    @include font-semibold;
  }

  &--medium {
    @include font-medium;
  }

  &--normal {
    @include font-normal;
  }
}

.light {
  color: $text-color-light;

  &--bg {
    background-color: $text-color-light;
  }
}

.dark {
  color: $text-color;

  &--bg {
    background-color: $text-color;
  }
}

@each $type in $spacing-types {
  @each $direction in $spacing-directions {
    @for $index from 0 to length($refcolors) {
      $size: list.nth($spacing-sizes, $index + 1);
      $type_abbr: string.slice($type, 1, 1);
      $direction_abbr: string.slice($direction, 1, 1);
      .#{$type_abbr}#{$direction_abbr}-#{$index} {
        @if length($type) > 1 {
          @include property-spacing($type + "-" + $direction, $index);
        } 
        @else {
          @if type == "x" or type == "a" {
            
          } 
          @if type == "y" or type == "a" {
  
          }
        }
      }
    }
  }
}

.flex, .container {
  display: flex;
  display: -webkit-flex;
  @extend .row;
  &--wrap {
    @extend .flex;
    flex-wrap: wrap;
    &-reverse {
      @extend .flex;
      flex-wrap: wrap-reverse;
    }
  }
}

.block {
  display: block;
}

.inline {
  display: inline;

  &-flex {
    display: inline-flex;
  }

  &-block {
    display: inline-block;
  }
}

.none {
  display: none;
}

.invisible, .hidden {
  display: hidden;
}

.row {
  width: 100%;
  @include flex-even;
  flex-direction: row;
  flex-wrap: wrap;
  &-reverse {
    @extend .row;
    flex-direction: row-reverse;
  }
}

.column {
  @include flex-even;
  flex-direction: column;
  //flex-basis: 100%;
  &-reverse {
    @extend .column;
    flex-direction: column-reverse;
  }
}

.h {
  &-100 {
    height: 100%;
  }

  &-75 {
    height: 75%;
  }

  &-50 {
    height: 50%;
  }

  &-25 {
    height: 25%;
  }
}

.w {
  &-100 {
    width: 100%;
  }

  &-75 {
    width: 75%;
  }

  &-66 {
    width: 66%;
  }

  &-50 {
    width: 50%;
  }

  &-33 {
    width: 33%;
  }

  &-25 {
    width: 25%;
  }
}

.grow {
  flex-grow: 1;
  &-0 {
    flex-grow: 0;
  }
  &-1 {
    flex-grow: 1;
  }
  &-2 {
    flex-grow: 2;
  }
  &-3 {
    flex-grow: 3;
  }
}

.shrink {
  flex-shrink: 1;
  &-0 {
    flex-shrink: 0;
  }
  &-1 {
    flex-shrink: 1;
  }
  &-2 {
    flex-shrink: 2;
  }
  &-3 {
    flex-shrink: 3;
  }
}